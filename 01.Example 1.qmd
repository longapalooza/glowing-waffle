---
title: 01.Example 1
date-modified: last-modified
date-format: 'dd YYYY-MM-DD HH:mm'
editor:
    markdown: 
        canonical: true
execute:
    echo: False
fig-cap-location: top
format:
    html:
        code-line-numbers: true
        css: css/styles.css
        fig-align: center
        toc: true
jupyter: python3
---

```{python}

from quarto_glu import *

```

```{python}

import math

L = Q_(6, 'm')    # nacelle length
D = Q_(3, 'm')    # nacelle diameter
P = Q_(2.5, 'MW')    # turbine power produced
T_inf = Q_(25, 'degC')    # far field temperature
T_sur = Q_(20, 'degC')    # surrounding temperature
es = 0.83    # surface emissivity
h = Q_(35, 'W/(m^2*K)')    # convection coefficient
N_gb = 0.93   # gear box efficiency
N_gen = 0.95   # generator efficiency

sig = Q_(5.67*10**-8, 'W/(m^2*K^4)')
pi = math.pi

```

## Given:

```{python}
#| output: asis

content = f'''
The blades of a wind turbine turn a large shaft at a relatively slow speed. The rotational speed is increased by a gearbox that has an efficiency shown below. In turn, the gearbox output shaft drives an electric generator with an efficiency also shown below. The cylindrical nacelle, which houses the gearbox, generator, and associated equipment, is ${L}$ long and has a diameter of ${D}$. The turbine produces ${P}$ of electrical power, and the air and surroundings temperatures are ${T_inf}$ and ${T_sur}$, respectively. The emissivity of the nacelle is ${es}$, and the convective heat transfer coefficient is ${h}$. The surface of the nacelle that is adjacent to the blade hub can be considered to be adiabatic.
'''
print(content)

```

![](img/01.Example%201.png){width="4in"}

## Required:

Determine the minimum possible operating temperature inside the nacelle.

## Solution:

Start first by defining all of the given values.

```{python}
#| output: asis

print(f'$$\eta_{{gb}} = {N_gb}$$')
print(f'$$\eta_{{gen}} = {N_gen}$$')
print(f'$$L = {L}$$')
print(f'$$D = {D}$$')
print(f'$$P = {P}$$')
print(f'$$T_\infty = {T_inf}$$')
print(f'$$T_{{sur}} = {T_sur}$$')
print(f'$$\\varepsilon = {es}$$')
print(f'$$h = {h}$$')

```

Another known quantity that will be used is the Stefan-Boltzman constant which is shown below.

```{python}
#| output: asis

print(f'$$\\sigma = {sig}$$')

```

@eq-first-law shows the 1st Law of Thermodynamics

$$
\frac{{dE}_{sys}}{dt} = \Sigma \dot{E}_{in} - \Sigma \dot{E}_{out}
$$ {#eq-first-law}

Assuming steady state conditions shows

$$
0 = \Sigma \dot{E}_{in} - \Sigma \dot{E}_{out}
$$ {#eq-first-law2}

The energy entering the system is from the mechanical work extracted from the air. Thus,

$$
\Sigma \dot{E}_{in} = \dot{W}_{mech}
$$ {#eq-first-law3}

The energy leaving the system is from the power produced by the turbine and the heat transfer occuring, both convection and radiation. Thus,

$$
\Sigma \dot{E}_{out} = P + \dot{Q}_{tot}
$$ {#eq-first-law4}

The simplified 1st Law then becomes

$$
0 = \dot{W}_{mech} - P - \dot{Q}_{tot}
$$ {#eq-first-law5}

or

$$
\dot{Q}_{tot} = \dot{W}_{mech} - P
$$ {#eq-first-law6}

It is also known that the gearbox and the generator have an efficiency so this may be used to relate the mechanical work to the power produced by the turbine. This is shown below.

$$
P=\eta_{gb}\eta_{gen}\dot{W}_{mech}
$$ {#eq-first-law7}

The total heat transferred from the nacelle is then

```{python}
#| output: asis

expr = r'P * \left( \frac{1}{\eta_{gb} \eta_{gen}} - 1 \right)'
expr_ = expr.replace('*', ' ')

ns = assign_variables(expr, ['P', 'N_gb', 'N_gen'], display = False)

Qdot_tot = eval(latex_as_py(expr, ns))
Qdot_tot_ = round(Qdot_tot.to('kW'), 1)

print(f'$$\dot{{Q}}_{{tot}} = \\frac{{P}}{{\eta_{{gb}} \eta_{{gen}}}} - P = {expr_} = {Qdot_tot_}$${{#eq-first-law8}}')

```

The total heat transferred from the nacelle is due to convection and radiation. Thus,

$$
\dot{Q}_{tot} = \dot{Q}_{conv} + \dot{Q}_{rad}
$$ {#eq-first-law9}

The convection and radiation terms may be found from their appropriate relationships. This is shown below.

$$
\dot{Q}_{conv} = h A \left( T_s - T_{\infty}\right)
$$ {#eq-first-law10}

$$
\dot{Q}_{rad} = \varepsilon \sigma A \left( T^4_s - T^4_{sur}\right)
$$ {#eq-first-law11}

The total heat transferred from the nacelle is then

$$
\dot{Q}_{tot} = h A \left( T_s - T_{\infty}\right) + \varepsilon \sigma A \left( T^4_s - T^4_{sur}\right)
$$ {#eq-first-law12}

Inspecting @eq-first-law12, it may be seen that the only variable that is unknown is the surface area, and surface temperature. Assuming the surface temperature is very close to the desired inside temperature, the only variable that needs to be determined to reach the final solution is the surface area. The surface area is found by approximating the nacelle as a simple cylinder taking into account one of the cylinder's end. This is shown below in @eq-area.

```{python}
#| output: asis

expr = r'\pi*L*D + \frac{\pi}{4}*D^2'
expr_ = expr.replace('*', ' ')

ns = {'L': 'L',
      'D': 'D',
      'pi': 'pi'}

A = eval(latex_as_py(expr, ns))
A_ = round(A.to('m**2'), 2)

content = f'A = {expr_} = {A_}'
content = '$$\n' + content + '\n$${#eq-area}'
print(content)

```

Now that the surface area is determined, the surface temperature may be found. Unfortunatly, there is no closed-form solution to find the surface temperature (since the expression is a fourth order polynominal). Python to the rescue. Python may be used to implement a root find technique (specifically the Newton-Raphson Method). See [here](https://en.wikipedia.org/wiki/Newton%27s_method) for details about the particular method. The first step to implement this method is to define the solving algorithm. This is shown below.

```{python}
#| echo: true

def newton_raphson(f, x, tol = 0.001):
    h = 0.000000001
    while(abs(f(x)) > tol):
        df = (f(x + h) - f(x))/h
        x = x - f(x)/df
    return x

```

The next step is to define the heat transfer expression (@eq-first-law12) as a python function. This is shown below.

```{python}

Qdot_tot = Qdot_tot.to_base_units().magnitude
h = h.to_base_units().magnitude
A = A.to_base_units().magnitude
T_inf = T_inf.to('K').magnitude
sig = sig.to_base_units().magnitude
T_sur = T_sur.to('K').magnitude

```

```{python}
#| echo: True

def hx_expr(T_s):
    return Qdot_tot - h*A*(T_s - T_inf) - es*sig*A*(T_s**4 - T_sur**4)

```

The key here is to move all terms of the expression to one side (notice the $\dot{Q}_{tot}$ term is positive and all other terms are negative). It is also important to non-dimensionalize all the quantities involved so that the `newton_raphson` function will work properly. Now that the heat transfer expression is defined as a function, we may use the Newton-Raphson methoed. This is shown below.

```{python}
#| echo: True

T_s = newton_raphson(hx_expr, 100)

```

The $100$ is provide as an initial guess of $100 K$ for the root find technique. The method finds the solution as

------------------------------------------------------------------------

::: answer
```{python}
#| output: asis

T_s = Q_(T_s, 'K')
T_s_ = round(T_s.to('K'), 1)
T_s__ = round(T_s.to('degC'), 1)

content = f'Answer: $T_s = {T_s_} = {T_s__}$'
print(content)

```
:::

------------------------------------------------------------------------
