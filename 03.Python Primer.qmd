---
title: 03.Python Primer
date-modified: last-modified
date-format: 'dd YYYY-MM-DD HH:mm'
editor:
    markdown: 
        canonical: true
execute:
    echo: False
fig-cap-location: top
format:
    html:
      code-line-numbers: true
      css: css/styles.css
      fig-align: center
      toc: true
jupyter: python3
---

```{python}
from quarto_glu import *
```

```{python}
#| eval: False
#| echo: True

import this

```

```{python}

from this import s

d = {}
for c in (65, 97):
    for i in range(26):
        d[chr(i+c)] = chr((i+13) % 26 + c)

print(''.join([d.get(c, c) for c in s]))

```

Python is an interpreted, high-level, general-purpose programming language. It is known as a dynamically typed language as opposed to a statically typed language. Simplistically speaking, what this means for the end-user is that you do not need to declare the type of a variable when the variable is defined. With a statically typed language, the variable data type must be stated with the variable definition. The Arduino language is an example of a statically typed language. The data type is indicated before the variable definition (as in `int my_var = 3;`) in the Arduino language. You tell the computer that the variable `my_var` is an `int` data type, and it has a value of `3`. With Python, this is not the case. You do not need to tell Python that the variable is an `int` or any other data type. It automatically determines the type from the context of its use. You might ask, why aren't all programming languages dynamically typed? The added convenience of this feature comes at the cost of performance. With all else being the same, statically typed languages will always outperform dynamically typed ones. There are various whys to install and utilize the Python programming, but we will be using the [Thonny IDE](https://thonny.org/) for the context of this course.

## Thonny

Thonny is an IDE (integrated development environment) for the Python programming language. [The demonstration video](https://youtu.be/nwIgxrXP-X4) on Thonny's website is a good introduction to some of the capabilities of Thonny. The video demonstrates the use of many of the features of Thonny. Not all of the features discussed will be used in this course. However, I want to point out some of the ones that will often be used for this course.

### Script Panel

Thonny's script panel is highlighted in @fig-script.

![Thonny's Script Panel](img/thonny_script.gif){#fig-script fig-alt="Thonny's Script Panel" fig-align="left" width="4in"}

::: callout-note
The theme of Thonny shown in @fig-script may look different than the default theme. I've selected the dark theme by going to the toolbar at the top and selecting `Tools > Options...` Then the `Theme & Font` tab. Then you may choose your desired theme.
:::

The script panel is the area in which you will write your code. There are a few things about the script panel worth mentioning. You can have multiple scripts open at once through the use of tabs in the script panel. The script's name will be listed on the tab of the script. In @fig-script, the script's name is `my_script.py`. The `.py` is known as the file extension and is reserved for Python files. Also seen in @fig-script is the number `1`. The number is known as the line number. Line numbers are not turned on by default in Thonny. It is beneficial when troubleshooting code or talking about code with someone else; for this reason, I recommend turning on line numbers.

::: callout-note
To turn on line numbers, go to `Tools > Options... > Editor` and then check `Show line numbers`.
:::

### Shell Panel

Thonny's shell panel is highlighted above in @fig-shell.

![Thonny's Shell Panel](img/thonny_shell.gif){#fig-shell fig-alt="Thonny's Shell Panel" width="4in"}

This area is where your script's output will be displayed and where any error messages are displayed. You will be referring to this panel quite often when writing scripts.

### Run Button

Thonny's run button is highlighted above in @fig-run.

![Thonny's Run Button](img/thonny_run.gif){#fig-run fig-alt="Thonny's Run Button" width="4in"}

The run button is how a particular Python script will be executed. You may click this button, or you may pressure `F5`. The developed habit of pressing `F5` is quicker than transitioning from keyboard to mouse and then clicking the button.

### Stop Button

Thonny's stop button is highlighted above in @fig-stop.

![Thonny's Stop Button](img/thonny_stop.gif){#fig-stop fig-alt="Thonny's Stop Button" width="4in"}

The stop button is used to stop a Python script prematurely. Sometimes a Python script will take a long time to run. If you desire to stop the script's execution prematurely, you can click the stop button or pressing `<ctrl> + F2`. Most of the time, this is not a problem, but occasionally a script is accidentally written so that it will never end. In this case, you must press the stop button before you can do anything else.

## Hello World

The best way to begin is with a Hello World example. The following code may be written to accomplish this in Python.

```{python}
#| echo: True

print('Hello, World!')

```

Once this code is written in your script panel in Thonny, you may save the file by going to `File > Save` or pressing `<ctrl> + s`. After saving, you can then select the Run button to execute the script. Once the script has been executed, the shell panel should display the message `Hello, World!`. The code above shows the `print` function. At a minimum, the `print` function expects one argument. It takes one argument and tries to display it to the shell. I say tries because sometimes the argument you give it is incapable of being printed. For example, the code shown below will result in an error.

```{python}
#| echo: True
#| error: True

print(Hello, World!)

```

While my error message shown above might look slightly different from the error message shown in Thonny, it should say something similar. There should be some message saying `invalid syntax` and some message with the line number where the error occurred. One of the reasons Python is simple for beginners to pick up is its error messages. Python "typically" has very descriptive and accurate error messages.

Why did the code above cause an error message?

## Variable Declaration

To declare a variable in Python, it's as simple as typing the variable, `=`, and then the value to assign the variable. Declaring two variables is shown below.

```{python}
#| echo: True

a = 17
b = 7
print(a + b)

```

From the code above, the variables `a` and `b` are defined as `16` and `7`, respectively. Although variables may be named practically anything you wish, a few rules must be followed.

-   Must start with a letter or an underscore.
-   Cannot start with a number.
-   Must contain only alphanumeric characters and underscore (`A-z`, `0-9`, and `_`).
-   Are case-sensitive (`age`, `Age`, `AGE` are all different variable names)

While it is technically possible to create any variable name while following these rules, it is recommended to follow a styling guide for consistency and readability. Python's styling guide is known as [PEP 8](https://www.python.org/dev/peps/pep-0008/). It recommends the use of a lowercase [snake case](https://en.wikipedia.org/wiki/Snake_case) for variable names. Snake case separates words with underscores (e.g., `my_variable_name`). Another common styling is known as [camel case](https://en.wikipedia.org/wiki/Camel_case), which separates capitalized words by underscores. `myVariableName` is an example of a camel case. While discussing styling, PEP 8 also recommends a space be put on either side of an equal sign for readability. While Python can execute code without those spaces, it is more difficult to read.

## Data Types

Data types are a programming language way of classifying variables. While Python is dynamically typed, it still has to classify variables into different groups or types. Python has numerous different data types, but it has only three types of numbers in Python. They are listed below.

### int

An `int` data type is a data type that is a number with an integer value. It may be 1, or 2, but not 1.5.

```{python}
#| echo: True

x = 1
print(type(x))

```

Shown above is the definition of an `int` variable. The `type()` function displays the variable data type.

### float

A `float` data type is a data type that is a number with a decimal value. It may be 1, or 2, and everything in between.

```{python}
#| echo: True

y = 2.8
print(type(y))

```

Shown above is the definition of a `float` variable.

### complex

A `complex` data type is a data type that is a number with a complex value. By complex value, I mean one that involves a [complex number](https://en.wikipedia.org/wiki/Complex_number) (i.e., the imaginary unit $i$).

```{python}
#| echo: True

z = 1.6 + 3.2j
print(type(z))

```

Shown above is the definition of a `complex` variable. Note how the imaginary unit $i$ is implemented. It is the letter $j$ and immediately follows the number. There is no multiplication or space.

## Arithmetic Operators

Arithmetic operators are used to perform mathematical operations like addition, subtraction, etc. The different types are listed below.

### Addition

```{python}
#| echo: True

a = 17
b = 7
print(a + b)

```

### Subtraction

```{python}
#| echo: True

a = 17
b = 7
print(a - b)

```

### Multiplication

```{python}
#| echo: True

a = 17
b = 7
print(a * b)

```

### Division

```{python}
#| echo: True

a = 17
b = 7
print(a / b)

```

### Exponentiation

```{python}
#| echo: True

a = 17
b = 7
print(a ** b)

```

A common mistake I see in first time Python users is not using `**` for exponents. Quite often, first-time users try to use the caret symbol (`^`). In Python, this symbol means something else, which will produce erroneous results.

### Floor Division

```{python}
#| echo: True

a = 17
b = 7
print(a // b)

```

The floor division operator is one that may be unfamiliar. In the example shown above, it returns the whole number of the quotient of the division of `a` and `b`. `a` divided by `b` is `2.428...` so the floor division of `a` and `b` returns `2`.

### Modulus

```{python}
#| echo: True

a = 17
b = 7
print(a % b)

```

The modulus operator is another one that may be unfamiliar. The way it works is similar to division. In the example above, `a` is divided by `b`. Its [remainder](https://en.wikipedia.org/wiki/Remainder) is what is returned, not the [quotient](https://en.wikipedia.org/wiki/Quotient). Since `a` is `17` and `b` is `7`, `17` is divided by `7`, which equals `2` with a remainder of `3`.

## Assignment Operators

Assignment operators are a way to perform two operations at once. They work by performing an arithmetic operation as well as an assignment operation. Some of the more common assignment operators in Python are shown below.

### Addition

```{python}
#| echo: True

a = 17
b = 7
a += b # the same as a = a + b
print(a)

```

Note the pound sign (or hashtag). This is how comments in Python are made. This type of comment is known as a line comment. Python will ignore the pound sign and the rest of the line. In the Arduino language, a line comment is made by two forward slashes (`//`). In the Arduino language, there is another type of comment called a block comment. You start a block comment with a forward slash and asterisk (`/*`) and end a block comment with an asterisk and forward-slash (`*/`). Anything between those two groups (`/*` and `*/`), regardless if there are multiple lines, will be disregarded by the Arduino language. Python has no such block comments. In Python, you must add a pound sign in front of every line that you wish to comment out. Comments are the best way to write notes to yourself or anyone viewing your code. It is good practice to comment your code. Comments are also handy in troubleshooting your code. You can quickly "remove" sections of code to see how over parts of your code behave. In Thonny, you can highlight multiple lines and press `<ctrl> + 3`, and it will comment out all of the highlighted lines. Since Python has no block comment feature, this is a handy trick when commenting out large code sections.

### Subtraction

```{python}
#| echo: True

a = 17
b = 7
a -= b # the same as a = a - b
print(a)

```

### Multiplication

```{python}
#| echo: True

a = 17
b = 7
a *= b # the same as a = a *b
print(a)

```

### Division

```{python}
#| echo: True

a = 17
b = 7
a /= b # the same as a = a / b
print(a)

```

### Exponentiation

```{python}
#| echo: True

a = 17
b = 7
a **= b # the same as a = a ** b
print(a)

```

### Floor Division

```{python}
#| echo: True

a = 17
b = 7
a //= b # the same as a = a // b
print(a)

```

### Modulus

```{python}
#| echo: True

a = 17
b = 7
a %= b # the same as a = a % b
print(a)

```

## Relational Operators

Relational operators are ones that compare two variables. They return a Boolean (i.e., True or False value) and are often used in conditional statements (i.e., `if` statements). Shown below are some of the more common relational operators in Python.

### Equal To

```{python}
#| echo: True

a = 17
b = 7
print(a == b)

```

This equal to operator should not be confused with the assignment operator (`=`). The `==` is asking, "Is the left-hand side (`a`) equal to the right-hand side (`b`)?" While the assignment operator (`=`) says, "The left-hand side is defined as whatever the right-hand side is."

### Not Equal To

```{python}
#| echo: True

a = 17
b = 7
print(a != b)

```

The not equals checks if $a \neq b$. In various programming languages, you will often see the exclamation mark used as a not operator.

### Greater Than

```{python}
#| echo: True

a = 17
b = 7
print(a > b)

```

### Great Than or Equal To

```{python}
#| echo: True

a = 17
b = 7
print(a >= b)

```

### Less Than

```{python}
#| echo: True

a = 17
b = 7
print(a < b)

```

### Less Than or Equal To

```{python}
#| echo: True

a = 17
b = 7
print(a <= b)

```

## Collections

Python is capable of storing multiple values in a single variable. Python calls these variables collections. In other programming languages, they are often called arrays or vectors. Python has four types of collections. They are listed below.

### List

A list is the most common type of collection in Python. We will be using lists quite often. A list is the type of collection closest to what you typically think of when you think of a vector. It is defined by using square brackets (`[ ]`), while a comma separates each element of the list.

```{python}
#| echo: True

cars = ['Ford', 'Volvo', 'BMW']
print(cars)

```

Python is a zero-indexed language meaning that whenever it starts counting elements of a list, it starts from 0. That is to say that the first element of a list is the zero index; the second element is the one index, and so on. Shown below is how you can refer to a particular element in a list. Note the number 2 here. That is referring to the third element of the list `cars`.

```{python}
#| echo: True

print(cars[2])

```

A list is known as an ordered, changeable collection that allows duplicates. An ordered changeable collection means that the order of the elements in the list matters, and you can change it. You are also able to have duplicate elements.

### Tuple

A tuple (hear the word [here](https://www.google.com/search?q=how+to+pronounce+tuple)) is a collection that is defined by the use of parenthesis (`( )`). Just as with a list, each element of the tuple is separated by a comma.

```{python}
#| echo: True

fruits = ('apple', 'banana', 'cherry')
print(fruits)

```

A tuple is also zero-indexed. A similar method used by a list is implemented to refer to a particular element of a tuple. Referring to a specific element of a tuple is shown below.

```{python}
#| echo: True

print(fruits[2])

```

A tuple is ordered and allows duplicates just as a list does. The main difference between a tuple and a list is that the tuple is unchangeable. Once defined, there is no changing it or adding elements to it. You may ask why you might need to use something like this when a list could serve the same purpose. Lists can do the same job a tuple, but with a tuple, you get the added security that the collection you are using is not being redefined at any point. For example, say you wanted to make a Python script that kept up with the courses you're required to take for your degree. Those courses will not change for your time at Tech. This would be a good use case for a tuple.

### Set

A set is a collection defined by curly brackets (`{ }`) and has elements separated by commas. A set is unordered, unindexed, doesn't allow changing or adding elements, and does not allow duplicates.

```{python}
#| echo: True

pets = {'dog', 'cat', 'fish', 'dog'}
print(pets)

```

You can see from the code above that it removed the duplicate dog element. A set is the most restrictive type of Python collection. As mentioned, a set is unindexed, meaning particular elements may not be referred to individually as we did with the list and tuple. Like a tuple, a set has specific cases where it is beneficial to use it over a list. For example, say you wanted to make a collection of anyone who took any of the ENGR/ENGT 12X courses last year. Some students went through the ENGR/ENGT 12X course on track (taking 120, 121, and 122 in order), but some students didn't pass a class and got off track. You could obtain rosters from all the ENGR/ENGT 12X course last year and put all the names in a set. The set would then tell you how many unique students were involved with the ENGR/ENGT 12X series last year.

### Dictionary

A dictionary is the most different type of Python collection. It is unordered, changeable, and indexed. A dictionary is defined using curly brackets (`{ }`), and every element is separated by a comma but works with the concept of key/value pairs for each element. Each element has a key and it has a value.

```{python}
#| echo: True

player1 = {'name': 'Babe Ruth', 'height': '6ft 2in', 'weight': 215}
print(player1)

```

A dictionary's key is a way for us to quickly refer to that particular element (instead of a specific index). For example, the player's name in the variable `player1` may be obtained by the code shown below.

```{python}
#| echo: True

print(player1['name'])

```

Sometimes dictionaries may get a little lengthy or long for a single line. You can break the different elements onto different lines, as shown below for readability.

```{python}
#| echo: True

player2 = {
    'name': 'Mickey Mantle',
    'weight': 195,
    'height': '5ft 11in'
}
print(player2)

```

The last thing to mention about dictionaries is that the key terms must be unique. You can not have multiple `name` keys or multiple `height` keys.

## Conditional Statements

Conditional statements in Python are made using the `if`, `elif`, and `else` keywords. Every if statement must begin with the keyword `if`. The `if` is then followed by a particular condition. In the example below, the condition uses the relational operator greater than `>` to compare `a` and `b`. A colon then follows the condition. If this condition is true, then the message "b is greater than a" will be displayed. Note the indention of the first print statement. The indention is how Python identifies what must happen in the `if` statement. While the indention does not have to be four spaces, PEP 8 recommends using four spaces and avoiding tabs. In Thonny, pressing `<tab>` will automatically enter four spaces for you. The code that will be executed if the `if` is true is known as a block. In the Arduino language, a block is specified by the use of curly brackets. That's why you must always have an open and closing curly bracket after an if statement in the Arduino language. With Python, this is not the case. You simply need to indent to indicate a different block of code.

```{python}
#| echo: True

a = 200
b = 33
if b > a:
    print('b is greater than a')
elif a == b:
    print('b is equal to a')
else:
    print('b is less than a')

```

The else if statement is determined by the `elif` keyword. It works much the same as an if statement. You are allowed to have as many else if statements as desired (or none at all), but you must always begin with and have only one if statement. Finally, a conditional statement may end with an else statement by the keyword `else`. The else statement block will execute if none of the above if or else if statements are true. The else statement is a kind of a catch-all. You do not have to have an else statement in a conditional statement, although it typically is good practice. Shown below is another example of the use of conditional statements.

```{python}
#| echo: True

a = 200
b = 33
c = 5
# conditional statement 1
if b == 33 or c == 6:
    print('b equals 33 or c equals 6.')

# conditional statement 2
if b > a and c == 4:
    print('b is greater than a and c equals 4.')
elif a == b:
    print('b is equal to a.')
else:
    print('b is less than a')
    print('or b is greater than a and c does not equal 4.')

```

Note the use of the `and`, and `or` keywords. In the Arduino language, `and`, and `or` are written as `&&`, and `||`, respectively. In addition to `and`, and `or`, there is the `not` keyword commonly used. An example of its use is shown below.

```{python}
#| echo: True

a = 200
b = 33
if not a == b:
    print('a is not equal to b.')
else:
    print('a is equal to b.')

```

## Iteration (loops)

There are two types of loops that may be used in Python. They are listed below.

### `while` loop

```{python}
#| echo: True

i = 0
while i < 10:
    print(i)
    i += 1 # what happens if this line is not here?

```

Shown above is a `while` loop. It uses one condition, and if that condition is true, it performs an iteration of the block of code in the while loop. The block that is executed is determined by the indention level, similar to conditional statements. The condition is checked at the start of each iteration. As long as it's true, the iteration is performed.

```{python}
#| echo: True

i = 0
while i < 10:
    print(i)
    if i == 3:
        break
    i += 1

```

Shown above is an example of how to use the `break` keyword. The `break` keyword stops the current iteration of the loop and exits out of the loop.

```{python}
#| echo: True

# i = 0
# while i < 10:
#     print(i)
#     if i == 3:
#         continue
#     i += 1

```

Shown above is an example of how to use the `continue` keyword. The `continue` keyword stops the current iteration, but instead of exiting out of the loop, it "continues" with the loop's next iteration.

Why is the entire code snippet commented out in the example above?

### `for` loop

```{python}
#| echo: True

snacks = ['chips', 'apples', 'peanuts']
for snack in snacks:
    print(snack)

```

Shown above is a `for` loop. The for loop uses the keyword `for` followed by a variable, then the keyword `in`, and then another variable. The last variable should be a collection of some sort. In the example above, it is a list. The first variable in the for loop statement may be named practically anything. However, it is common practice to use the singular form of the collection variable (i.e., `snack` and `snacks`). Using the singular form of the variable is more for readability than anything else. A `for` loop works by iterating (or looping) through all the collection elements. On each iteration (or loop), the first variable is assigned the collection's particular element's value. For the above example, the variable `snack` will be equal to `chips` on the first iteration, `apples` in the second iteration, and `peanuts` in the third iteration. The way you might read a `for` loop statement is by saying, "For each element of snacks as the variable snack, print the snack" or "For every snack in the collection snacks, print the snack". Just as in the case of `while` loops, the keywords `break` and `continue` may be used. A useful function when using a `for` loop is the `range()` function. It is used below.

```{python}
#| echo: True

for x in range(6): # same as range(0, 6, 1)
    print(x)

```

The `range()` function takes a minimum of one argument. In the example above, `range(6)` creates a collection that contains the integer values starting at 0 and going all the way but does not include 6.

```{python}
#| echo: True

for x in range(2, 7): # same as range(2, 7, 1)
    print(x)

```

Shown above is the use of the `range()` function where two arguments are given. The first argument is the starting value of the collection, and the second argument is the noninclusive ending value of the collection. For the example above, the collection contains the integer values from 2 to 6.

```{python}
#| echo: True

for x in range(0, 21, 3):
    print(x)

```

Shown above is the third and final way to use the `range()` function. When three arguments are given, the first two behave as the previous example. The third argument specifies the interval between each step of the collection. So instead of counting by ones, the collection counts by threes in the example above.

## Functions

User-defined functions in Python are created by the use of the `def` keyword. Shown below is an example of a user-defined function.

```{python}
#| echo: True

def my_function1():
    print('What')

```

The keyword `def` is followed by the function name, then an open and close parenthesis, and finally, a colon to define a function. Function names follow the same rules as variable names. `my_function1()` takes no arguments. That is why there is nothing between the opening and closing parentheses. If the function required some type of argument, the argument names would be inserted between the parentheses. An example of this is shown below.

```{python}
#| echo: True

def my_function2(a, b):
    return a + b ** 2

```

Notice the indentation in both functions. The indentation tells Python where the different blocks of code begin and end. In the above example, the keyword `return` is used. The `return` keyword is how a user-defined function gives value back. If no `return` keyword is used, the function returns a `None` value, a special data type in Python representing a nothing value.

```{python}
#| echo: True

def my_function3(a, b):
    if a > b:
        return a + b
    elif a < b:
        return b - a
    else:
        return a * b

```

Shown above is another example of a function. It may be seen that there are multiple `return` keywords. Having multiple `return` statements is perfectly acceptable. The function will return the value based on the conditional statement. To use a user-defined function is similar to using any other function in Python. Several examples are shown below.

```{python}
#| echo: True

print(my_function1())

```

::: callout-note
The `None` value displayed. This is since no `return` keyword was used in the `my_function1()` function.
:::

```{python}
#| echo: True

print(my_function2(3, 4))

```

```{python}
#| echo: True

print(my_function3(3, 3))

```

```{python}
#| echo: True

print(my_function3(4, 2))

```

```{python}
#| echo: True

print(my_function3(2, 3))

```

## Strings

Strings are a Python data type that represents a character like value. Character like values are any alphanumeric value (i.e., A-z0-9), but they also include punctuation, spaces, tabs, etc. To indicate a string in Python, single `'` or double `"` quotes may be used. I personally prefer single quotes, but there is not an agreed-upon styling choice. Whatever you choose, be consistent. Shown below is an example of defining a string.

```{python}
#| echo: True

greeting = 'Hello'
name = 'Will'
print(greeting + ' ' + name)

```

The string variables `greeting` and `name` are defined with single quotes, and the print statement combines all the strings through the use of concatenation. Concatenation is the method in which strings are "added", "strung", or "appended" to one another. For the above example, there strings a concatenated together, the string 'Hello', ' ', and 'Will'.

```{python}
#| echo: True

greeting = 'Hello'
name = 'Will'
question = 'How\'s it going?'
print(greeting + ' ' + name + '. ' + question)

```

Shown above is another example of the use of strings. It is important to point out the string defined in the variable `question`. Occasionally when writing strings, the use of single or double quotes in the string itself will be necessary. If I did not include the backslash, Python would have interpreted the single quote as the closing single quote and would think the string is over, but this is not the case. A backslash is used to "escape" the following character to avoid the quote's premature closing. Escapement is a method in which character values are interpreted literally as characters and not as program code. When Python sees a backslash in a string, it knows the next character (in this case, the single quote) is not a closing single quote but a single quote character that should be a part of the string. Another common mistake is shown below.

```{python}
#| echo: True
#| error: True

greeting = 'Hello'
name = 5
print(greeting + ' ' + name)

```

The `name` variable is not a string in the example above. To Python, the variable `name` represents the number five and not a character value. In this case, it does not know how to concatenate a numeric value to a string. Mix matched data types like this may be fixed in one of two ways. The first way is shown below, enclosing the number 5 with single quotes.

```{python}
#| echo: True

greeting = 'Hello'
name = '5'
print(greeting + ' ' + name)

```

The second way is to utilize the `str()` function. The `str()` function is a built-in function in Python that takes one argument. It tries to take that argument and convert it into a string. Using the `str()` function is shown below.

```{python}
#| echo: True

greeting = 'Hello'
name = 5
print(greeting + ' ' + str(name))

```

## Helpful Links

-   [Python.org](https://docs.python.org/3/tutorial/)
-   [W3Schools](https://www.w3schools.com/python/)
-   [Tutorials Point](https://www.tutorialspoint.com/python/)

------------------------------------------------------------------------
